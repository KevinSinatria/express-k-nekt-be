generator client {
  provider = "prisma-client-js"
//   output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model classes {
  id              Int               @id @default(autoincrement()) @db.UnsignedSmallInt
  class           String            @unique(map: "classes_class_unique") @db.VarChar(50)
  detail_students detail_students[]
}

model detail_students {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  nis        Int          @db.UnsignedInt
  id_year    Int          @db.UnsignedSmallInt
  id_class   Int          @db.UnsignedSmallInt
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  students   students     @relation(fields: [nis], references: [nis], onDelete: NoAction, onUpdate: NoAction, map: "detail_students_ibfk_1")
  classes    classes      @relation(fields: [id_class], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "detail_students_id_class_foreign")
  years      years        @relation(fields: [id_year], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "detail_students_id_year_foreign")
  violations violations[]

  @@unique([nis, id_year, id_class], map: "nis_2")
  @@index([id_class], map: "detail_students_id_class_foreign")
  @@index([id_year], map: "detail_students_id_year_foreign")
  @@index([nis], map: "nis")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model students {
  nis             Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(100)
  point           Int               @default(0)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  detail_students detail_students[]
}

model users {
  id             Int          @id @default(autoincrement())
  username       String       @unique(map: "username") @db.VarChar(255)
  password       String       @db.VarChar(255)
  role           users_role   @default(kesiswaan)
  api_token      String?      @unique(map: "api_token") @db.VarChar(255)
  remember_token String?      @db.VarChar(255)
  created_at     DateTime?    @default(now()) @db.Timestamp(0)
  updated_at     DateTime?    @default(now()) @db.Timestamp(0)
  violations     violations[]
}

model violation_categories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model violation_category {
  id             Int              @id @default(autoincrement()) @db.SmallInt
  name           String           @db.VarChar(25)
  violation_type violation_type[]
}

model violation_type {
  id                 Int                @id @default(autoincrement()) @db.SmallInt
  name               String             @db.VarChar(100)
  point              Int                @db.SmallInt
  punishment         String             @db.VarChar(50)
  category_id        Int                @db.SmallInt
  violation_category violation_category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "violation_type_ibfk_1")
  violations         violations[]

  @@index([category_id], map: "category_id")
}

model violations {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  student_id      Int             @db.UnsignedInt
  type_id         Int             @db.SmallInt
  teacher_id      Int
  implemented     Boolean
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  detail_students detail_students @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "violations_ibfk_1")
  violation_type  violation_type  @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "violations_ibfk_2")
  users           users           @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "violations_ibfk_3")

  @@index([student_id], map: "student_id")
  @@index([teacher_id], map: "teacher_id")
  @@index([type_id], map: "type_id")
}

model years {
  id              Int               @id @default(autoincrement()) @db.UnsignedSmallInt
  year            String            @unique(map: "years_year_unique") @db.VarChar(10)
  detail_students detail_students[]
}

enum users_role {
  admin
  kesiswaan
}
